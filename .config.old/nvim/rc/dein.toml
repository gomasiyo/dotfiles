[[plugins]]
repo = 'Shougo/dein.vim'
[[plugins]] repo = 'joshdick/onedark.vim'
hook_add = '''
  colorscheme onedark
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    " NERDTree
    autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
    nmap <silent><C-n> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
    " タブ
    let g:airline#extensions#tabline#enabled = 1
    nmap <C-j> <Plug>AirlineSelectPrevTab
    nmap <C-k> <Plug>AirlineSelectNextTab
    nmap <silent> q :bd<CR>
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    let g:airline#extensions#tabline#buffer_idx_format = {
        \ '0': '0 ',
        \ '1': '1 ',
        \ '2': '2 ',
        \ '3': '3 ',
        \ '4': '4 ',
        \ '5': '5 ',
        \ '6': '6 ',
        \ '7': '7 ',
        \ '8': '8 ',
        \ '9': '9 '
    \}
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
hook_add = '''
    " Powerline系フォントを利用する
    set laststatus=2
    let g:airline_powerline_fonts = 1
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    let g:airline#extensions#whitespace#mixed_indent_algo = 1
    " let g:airline_theme = 'tomorrow'
    if !exists('g:airline_symbols')
      let g:airline_symbols = {}
    endif

    " unicode symbols
    let g:airline_left_sep = '»'
    let g:airline_left_sep = '▶'
    let g:airline_right_sep = '«'
    let g:airline_right_sep = '◀'
    let g:airline_symbols.crypt = '🔒'
    let g:airline_symbols.linenr = '☰'
    let g:airline_symbols.linenr = '␊'
    let g:airline_symbols.linenr = '␤'
    let g:airline_symbols.linenr = '¶'
    let g:airline_symbols.maxlinenr = ''
    let g:airline_symbols.maxlinenr = '㏑'
    let g:airline_symbols.branch = '⎇'
    let g:airline_symbols.paste = 'ρ'
    let g:airline_symbols.paste = 'Þ'
    let g:airline_symbols.paste = '∥'
    let g:airline_symbols.spell = 'Ꞩ'
    let g:airline_symbols.notexists = '∄'
    let g:airline_symbols.whitespace = 'Ξ'

    " powerline symbols
    let g:airline_left_sep = ''
    let g:airline_left_alt_sep = ''
    let g:airline_right_sep = ''
    let g:airline_right_alt_sep = ''
    let g:airline_symbols.branch = ''
    let g:airline_symbols.readonly = ''
    let g:airline_symbols.linenr = '☰'
    let g:airline_symbols.maxlinenr = ''
'''

[[plugins]]
repo = 'Shougo/neocomplcache'
hook_add = '''
    " NeoComplcashe
    set completeopt=menuone

    function! s:my_crinsert()
        return pumvisible() ? neocomplcache#close_popup() : "\<Cr>"
    endfunction
    inoremap <silent> <CR> <C-R>=<SID>my_crinsert()<CR>

    "起動時に有効
    let g:neocomplcache_enable_at_startup = 1
    "ポップアップメニューで表示される候補の数。初期値は100
    let g:neocomplcache_max_list = 20
    "自動補完を行う入力数を設定。初期値は2
    let g:neocomplcache_auto_completion_start_length = 2
    "手動補完時に補完を行う入力数を制御。値を小さくすると文字の削除時に重くなる
    let g:neocomplcache_manual_completion_start_length = 3
    "バッファや辞書ファイル中で、補完の対象となるキーワードの最小長さ。初期値は4。
    let g:neocomplcache_min_keyword_length = 4
    "シンタックスファイル中で、補完の対象となるキーワードの最小長さ。初期値は4。
    let g:neocomplcache_min_syntax_length = 4
    "1:補完候補検索時に大文字・小文字を無視する
    let g:neocomplcache_enable_ignore_case = 1
    "入力に大文字が入力されている場合、大文字小文字の区別をする
    let g:neocomplcache_enable_smart_case = 1
    "大文字小文字を区切りとしたあいまい検索を行うかどうか。
    "DTと入力するとD*T*と解釈され、DateTime等にマッチする。
    let g:neocomplcache_enable_camel_case_completion = 0
    "アンダーバーを区切りとしたあいまい検索を行うかどうか。
    "m_sと入力するとm*_sと解釈され、mb_substr等にマッチする。
    let g:neocomplcache_enable_underbar_completion = 0

    "シンタックス補完を無効に
    let g:neocomplcache_plugin_disable = {
                \ 'syntax_complete' : 1,
                \}

    "補完するためのキーワードパターンを指定
    if !exists('g:neocomplcache_keyword_patterns')
        let g:neocomplcache_keyword_patterns = {}
    endif
    "日本語を補完候補として取得しないようにする
    let g:neocomplcache_keyword_patterns['default'] = '\h\w*'
    "twigはhtmlと同じに
    let g:neocomplcache_keyword_patterns['twig'] = '</\?\%([[:alnum:]_:-]\+\s*\)\?\%(/\?>\)\?\|&amp;\h\%(\w*;\)\?\|\h[[:alnum:]_-]*="\%([^"]*"\?\)\?\|\h[[:alnum:]_:-]*'

    "関数を補完するための区切り文字パターン
    if !exists('g:neocomplcache_delimiter_patterns')
        let g:neocomplcache_delimiter_patterns = {}
    endif
    let g:neocomplcache_delimiter_patterns['php'] = ['->', '::', '\']

    "カーソルより後のキーワードパターンを認識。
    "h|geとなっている状態(|はカーソル)で、hogeを補完したときに後ろのキーワードを認識してho|geと補完する機能。
    "修正するときにかなり便利。
    if !exists('g:neocomplcache_next_keyword_patterns')
        let g:neocomplcache_next_keyword_patterns = {}
    endif
    let g:neocomplcache_next_keyword_patterns['twig'] = '[[:alnum:]_:-]*>\|[^"]*"'

    "ディクショナリ補完
    "ファイルタイプごとの辞書ファイルの場所
    let g:neocomplcache_dictionary_filetype_lists = {
                \ 'default' : '',
                \ 'php' : $HOME . '/.config/nvim/dict/php.dict',
                \ 'ctp' : $HOME . '/.config/nvim/dict/php.dict',
                \}

    "タグ補完
    "タグファイルの場所
    augroup SetTagsFile
        autocmd!
        autocmd FileType php set tags=$HOME/.config/nvim/tags/php.tags
    augroup END

    "タグ補完の呼び出しパターン
    if !exists('g:neocomplcache_member_prefix_patterns')
        let g:neocomplcache_member_prefix_patterns = {}
    endif
    let g:neocomplcache_member_prefix_patterns['php'] = '->\|::'

    "スニペット補完
    "標準で用意されているスニペットを無効にする。初期化前に設定する
    let g:neocomplcache_snippets_disable_runtime_snippets = 1

    "オムニ補完
    augroup SetOmniCompletionSetting
        autocmd!
        autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
        autocmd FileType html setlocal omnifunc=htmlcomplete#CompleteTags
        autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
        autocmd FileType ctp setlocal omnifunc=htmlcomplete#CompleteTags
        autocmd FileType twig setlocal omnifunc=htmlcomplete#CompleteTags
    augroup END

    "オムニ補完のパターンを設定
    if !exists('g:neocomplcache_omni_patterns')
        let g:neocomplcache_omni_patterns = {}
    endif
    let g:neocomplcache_omni_patterns['twig']= '<[^>]*'

    "インクルード補完。よくわからない。初期化のみに留める
    "通常は設定する必要はないらしい。
    "Vim標準のインクルード補完を模倣しているそうなので、そちらを勉強する
    if !exists('g:neocomplcache_include_paths')
        let g:neocomplcache_include_paths = {}
    endif
    if !exists('g:neocomplcache_include_patterns')
        let g:neocomplcache_include_patterns = {}
    endif
    if !exists('g:neocomplcache_ctags_arguments_list')
        let g:neocomplcache_ctags_arguments_list = {}
    endif
'''
